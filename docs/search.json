[{"path":"https://jaideep777.github.io/rfish/articles/fished_population.html","id":"quickly-simulating-an-unfished-population-to-equilibrium","dir":"Articles","previous_headings":"","what":"Quickly simulating an unfished population to equilibrium","title":"Simulating a fished population","text":"possible manually simulate non-fished population equilibrium demonstrated previous tutorial. ’s easier way: quickly simulate unfished population, can use function noFishingEquilibriate().","code":"# Create a prototype fish as usual fish = new(Fish) fish$par$s0 = 0.09637 fish$par$Bhalf_growth = 100e11  # Create a population pop_K = new(Population, fish) pop_K$set_superFishSize(1e6)  # Equilibriate under no-fishing conditions K_ibm = pop_K$noFishingEquilibriate()"},{"path":"https://jaideep777.github.io/rfish/articles/fished_population.html","id":"using-a-simulator-to-simulate-populations","dir":"Articles","previous_headings":"","what":"Using a simulator to simulate populations","title":"Simulating a fished population","text":"rfish package provides simulator easily simulate populations fish without hassle manual updating. simulator can also simulate multiple populations different control parameters , making convenient analyse control space (look control space later tutorial). create simulator, need need specify prototype fish:","code":"sim = new(Simulator, fish)"},{"path":"https://jaideep777.github.io/rfish/articles/fished_population.html","id":"copying-the-non-fished-population-in-the-simulator","dir":"Articles","previous_headings":"","what":"copying the non-fished population in the simulator","title":"Simulating a fished population","text":"can simulate fished population, need copy equilibriated non-fished population simulator. simulator calculate required properties population order simulate fished population.","code":"sim$setNaturalPopulation(pop_K)"},{"path":"https://jaideep777.github.io/rfish/articles/fished_population.html","id":"simulating-a-fished-population","dir":"Articles","previous_headings":"","what":"Simulating a fished population","title":"Simulating a fished population","text":"Finally, ready simulate fished population. create population simulated set parameters , suppose want simulate population 200 years harvest proportion 0.3 minimum size limit 45, simply last argument flag re-initialize population simulating. flag set false, simulation continue current state population, allowing us simulate different control regimes time. Let’s plot output simulation (compared model Dankel et al.XXX)","code":"pop = new(Population, fish) pop$par$Bhalf = 365426284/4.7 pop$set_superFishSize(2e5) nsteps = 200 h = 0.3 lf = 45 res_ibm = sim$simulate(pop, lf, h, nsteps, T) res = simulate(h, lf, F)  d = pop$get_state() table(d$age) ##  ##    1    2    3    4    5    6    7    8    9   10   11   12   13   14   16   17  ## 7910 3629 2095 1233  733  409  223  127   82   39   24   11   11    4    2    1 par(mfrow = c(2,3), mar=c(4,4,1,1))  ssb.max = max(c(res_ibm$ssb/1e9, res$summaries$SSB/1e9)) plot(y=res_ibm$ssb/1e9, x=seq(1,nsteps,1), ylab=\"SSB (MT)\", xlab=\"Year\", col=\"cyan3\", type=\"l\", ylim=c(0,ssb.max)) points(y=res$summaries$SSB/1e9, x=res$summaries$year, type=\"l\")  yield.max = max(c(res_ibm$yield/1e9, res$summaries$Y/1e9)) plot(y=res_ibm$yield/1e9, x=seq(1,nsteps,1), ylab=\"Yield (MT)\", xlab=\"Year\", col=\"cyan3\", type=\"l\", ylim=c(0,yield.max)) points(y=res$summaries$Y/1e9, x=res$summaries$year, type=\"l\")  emp.max = max(c(res_ibm$employment.sea, res$summaries$D.sea)) plot(y=res_ibm$employment.sea, x=seq(1,nsteps,1), ylab=\"Employment at sea (person-years)\", xlab=\"Year\", col=\"cyan3\", type=\"l\", ylim=c(0,emp.max)) points(y=res$summaries$D.sea, x=res$summaries$year, type=\"l\")  emp.max = max(c(res_ibm$employment.shore, res$summaries$D.shr)) plot(y=res_ibm$employment.shore, x=seq(1,nsteps,1), ylab=\"Employment on shore (person-years)\", xlab=\"Year\", col=\"cyan3\", type=\"l\", ylim=c(0,emp.max)) points(y=res$summaries$D.shr, x=res$summaries$year, type=\"l\")  p.sea.max = max(c(res_ibm$profit.sea/1e9, res$summaries$P.sea/1e9)) p.sea.min = min(c(res_ibm$profit.sea/1e9, res$summaries$P.sea/1e9)) plot(y=res_ibm$profit.sea/1e9, x=seq(1,nsteps,1), ylab=\"Profit at sea (Billions NOK)\", xlab=\"Year\", col=\"cyan3\", type=\"l\", ylim=c(p.sea.min,p.sea.max)) points(y=res$summaries$P.sea/1e9, x=res$summaries$year, type=\"l\")  p.shr.max = max(c(res_ibm$profit.shore/1e9, res$summaries$P.shr/1e9)) p.shr.min = min(c(res_ibm$profit.shore/1e9, res$summaries$P.shr/1e9)) plot(y=res_ibm$profit.shore/1e9, x=seq(1,nsteps,1), ylab=\"Profit at shore (Billions NOK)\", xlab=\"Year\", col=\"cyan3\", type=\"l\", ylim=c(p.shr.min,p.shr.max)) points(y=res$summaries$P.shr/1e9, x=res$summaries$year, type=\"l\") par(mfrow=c(1,1)) d = pop$get_state() d1 = d %>% group_by(age) %>% summarize(mat = length(which(isMature))/length(isMature)) plot(mat, type=\"l\") points(d1$mat~d1$age, type=\"o\", col=\"cyan3\")"},{"path":"https://jaideep777.github.io/rfish/articles/fish_population.html","id":"create-a-fish","dir":"Articles","previous_headings":"","what":"Create a fish","title":"Simulating a fish population without fishing","text":"population collection fish. Therefore create population, first create fish. fish used prototype construct population. , create fish set parameters:","code":"fish = new(Fish) fish$par$flag = 1 fish$par$s0 = 0.09637 fish$par$Bhalf_growth = 1e100 fish$par$use_old_model_mat = T  fish$get_state() ## [1]  0.00000000  1.00000000  0.00000000  1.00000000 19.17273040  0.05618875"},{"path":"https://jaideep777.github.io/rfish/articles/fish_population.html","id":"create-a-population","dir":"Articles","previous_headings":"","what":"Create a population","title":"Simulating a fish population without fishing","text":"constructor population requires Fish object argument. can create fish population follows:","code":"pop = new(Population, fish)  # This fish object will be used as a prototype to construct all fish in the population"},{"path":"https://jaideep777.github.io/rfish/articles/fish_population.html","id":"setting-population-parameters","dir":"Articles","previous_headings":"","what":"Setting population parameters","title":"Simulating a fish population without fishing","text":"Population parameters can set way fish parameters, using par object population Two parameters important: + n - Superfish size. Since population can billions fish, simulate individual fish. Rather, “Fish” represents group n actual fish. collection called “Superfish”. Reducing parameter necessitate simulating agents model, reduce noise also take computational time. + Bhalf - parameter controls density dependent recruitment. can also set management parameters population: Harvest proportion - proportion fish allowed harvested every year Minimum size limit - size fish harvested","code":"pop$par$n = 5e5  # Each superfish contains 500,000 fish pop$par$Bhalf = 365426284/4.7 pop$set_harvestProp(0)   # Harvest  pop$set_minSizeLimit(45) # Only fish above 45 cm length can be harvested"},{"path":"https://jaideep777.github.io/rfish/articles/fish_population.html","id":"initialising-a-population","dir":"Articles","previous_headings":"","what":"Initialising a population","title":"Simulating a fish population without fishing","text":"default, population contains fish. must initialize population specified number superfish. can also peek state population. state population simply dataframe consisting state superfish population.","code":"pop$init(1000)  # initialize the population with 1000 agents (superfish) d = pop$get_state() head(d) ##   t.birth age isMature isAlive   length     weight flag ## 1       0   1    FALSE    TRUE 19.17273 0.05618875    1 ## 2       0   1    FALSE    TRUE 19.17273 0.05618875    1 ## 3       0   1    FALSE    TRUE 19.17273 0.05618875    1 ## 4       0   1    FALSE    TRUE 19.17273 0.05618875    1 ## 5       0   1    FALSE    TRUE 19.17273 0.05618875    1 ## 6       0   1    FALSE    TRUE 19.17273 0.05618875    1"},{"path":"https://jaideep777.github.io/rfish/articles/fish_population.html","id":"simulating-an-unfished-population","dir":"Articles","previous_headings":"","what":"Simulating an unfished population","title":"Simulating a fish population without fishing","text":"can simulate population continuously updateing . update performs 1 year simulation, implementing processes maturation, growth, mortality, reproduction fish population. example, let simulate population 200 years.","code":"nsteps = 200             # Let's simulate for 200 years nfish = numeric(nsteps)  # Let's keep track of the number of superfish nfish[1]=1000            # Since we initialized the population with 1000 superfish dat = data.frame(ssb=0, yield=0, emp_sea=0, emp_shore=0, profit_sea=0, profit_shr=0, tsb=0) for (i in 2:nsteps){   v = pop$update()       # Update all fish over 1 year    dat = rbind(dat, v)    # some book-keeping   nfish[i] = pop$nfish() } dat = dat[-1,]  d = pop$get_state() dist = table(d$age, d$length)  par(mfrow = c(3,1), mar=c(5,5,1,1), oma=c(1,1,1,1), cex.lab=1.5, cex.axis=1.5) plot(nfish~seq(1,nsteps,1), ylab=\"No. of superfish\", xlab=\"Year\") image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") ## Warning in log(1 + 3 * log(dist)): NaNs produced res = simulate(0, 45, F) matplot(cbind(dat$ssb/1e9, res$summaries$SSB[1:199]/1e9), ylab=\"SSB (MT)\", xlab=\"Year\", col=c(\"cyan\", \"black\"), lty=1, type=c(\"p\",\"l\"), pch=1)"},{"path":"https://jaideep777.github.io/rfish/articles/multi_populations.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Simulating multiple populations at once","text":"usual, start creating prototype fish , create unfished population (need ). Create simulator assign non-fished population .","code":"fish = new(Fish) fish$par$s0 = 0.09637 fish$par$Bhalf_growth = 100e11 fish$par$use_old_model_mat = T pop_K = new(Population, fish) pop_K$set_superFishSize(2e6) K_ibm = pop_K$noFishingEquilibriate() sim = new(Simulator, fish) sim$setNaturalPopulation(pop_K)"},{"path":"https://jaideep777.github.io/rfish/articles/multi_populations.html","id":"create-a-population-to-simulate","dir":"Articles","previous_headings":"","what":"Create a population to simulate","title":"Simulating multiple populations at once","text":"population reused simulator.","code":"pop = new(Population, fish) pop$par$Bhalf = 365426284/4.7 pop$set_superFishSize(2e5)"},{"path":"https://jaideep777.github.io/rfish/articles/multi_populations.html","id":"simulate","dir":"Articles","previous_headings":"","what":"Simulate","title":"Simulating multiple populations at once","text":"","code":"nsteps = 200 hvec = seq(0, 0.99, length.out = 20)  res_ibm_full = sim$simulate_multi(pop, hvec, nsteps, T) arr = array(data=res_ibm_full, dim=c(nsteps, length(hvec), 4))"},{"path":"https://jaideep777.github.io/rfish/articles/multi_populations.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Simulating multiple populations at once","text":"","code":"lf = 45 dat_ibm = data.frame(matrix(ncol=4, nrow=0)) colnames(dat_ibm) =c(\"ssb\", \"yield\", \"employment\", \"profit\") dat = data.frame(matrix(ncol=6, nrow=0)) colnames(dat) =c(\"ssb\", \"yield\", \"emp.sea\", \"emp.shr\", \"profit.sea\", \"profit.shr\") for (ih in 1:length(hvec)){   res = simulate(hvec[ih], lf, F)   v = colMeans((res$summaries %>% select(SSB, Y, D.sea, D.shr, P.sea, P.shr))[151:200,])   dat[nrow(dat)+1,] = v/c(1e9, 1e9, 1, 1, 1e9, 1e9)   v_ibm = colMeans(arr[151:200, ih, ])   dat_ibm[nrow(dat_ibm)+1,] = v_ibm/c(1e9, 1e9, 1, 1e9) } dat$employment = dat$emp.sea+dat$emp.shr dat$profit = dat$profit.sea+dat$profit.shr   par(mfrow = c(2,2), mar=c(5,5,1,1), cex.lab=1.5, cex.axis=1.5) matplot(ylab=\"ssb (MT)\",y=cbind(dat_ibm$ssb, dat$ssb, dat_ibm$tsb, dat$tsb), x=hvec, type=\"l\", col=c(\"cyan2\", \"black\", \"orange\", \"magenta\"), lwd=2, lty=1, xlab=\"Harvest prop\") matplot(ylab=\"yield (MT)\",y=cbind(dat_ibm$yield, dat$yield), x=hvec, type=\"l\", col=c(\"cyan2\", \"black\"), lwd=2, lty=1, xlab=\"Harvest prop\") matplot(ylab=\"employment (PY)\",y=cbind(dat_ibm$employment, dat$employment), x=hvec, type=\"l\", col=c(\"cyan2\", \"black\"), lwd=2, lty=1, xlab=\"Harvest prop\") matplot(ylab=\"profit (Bn NOK)\",y=cbind(dat_ibm$profit, dat$profit), x=hvec, type=\"l\", col=c(\"cyan2\", \"black\"), lwd=2, lty=1, xlab=\"Harvest prop\")"},{"path":"https://jaideep777.github.io/rfish/articles/single_fish.html","id":"create-a-fish-with-default-parameters","dir":"Articles","previous_headings":"","what":"Create a fish with default parameters","title":"Creating and simulating a single fish","text":"fish can created instancing object Rcpp class Fish:","code":"fish = new(Fish)  fish$length ## [1] 19.17273"},{"path":"https://jaideep777.github.io/rfish/articles/single_fish.html","id":"change-fish-parameters","dir":"Articles","previous_headings":"","what":"Change fish parameters","title":"Creating and simulating a single fish","text":"Suppose want create Fish custom parameters. can access set parameters using par object fish: Alternativelt, create parameters object, change parameters desired, assign fish.","code":"fish$par$s0 = 0.1  fish$par$s0 ## [1] 0.1 # Create parameters object fish.par = new(FishParams)   # Change specific parameter values fish.par$s0 = 0.09637 fish.par$Bhalf_growth = 1e11  # Assign it to the fish fish$par = fish.par  fish$par$s0 ## [1] 0.09637"},{"path":"https://jaideep777.github.io/rfish/articles/single_fish.html","id":"get-the-state-of-the-fish","dir":"Articles","previous_headings":"","what":"Get the state of the fish","title":"Creating and simulating a single fish","text":"get state fish, .e., length, age, maturation status, whether alive, etc, use get_state() function. function returns vector following order Year birth Age mature (T/F) alive (T/F) length weight","code":"fish$get_state() ## [1]  0.00000000  1.00000000  0.00000000  1.00000000 19.17273040  0.05618875"},{"path":"https://jaideep777.github.io/rfish/articles/single_fish.html","id":"simulate-the-fish","dir":"Articles","previous_headings":"","what":"Simulate the fish","title":"Creating and simulating a single fish","text":"can now update status fish calling demographic functions. update maturity fish, grow length one year, increment age 1 year, can ","code":"fish$updateMaturity() fish$grow(0)  # The argument is the total stock biomass of the population fish$set_age(fish$age+1) # The argument is the new age  fish$length ## [1] 28.96229"},{"path":"https://jaideep777.github.io/rfish/articles/single_fish.html","id":"simulating-a-fish-over-multiple-years","dir":"Articles","previous_headings":"","what":"Simulating a fish over multiple years","title":"Creating and simulating a single fish","text":"Let us now simulate fish starting age 1 upto age 30, performing maturation, growth, age increment every year order. record fish length timestep can plot growth trajectory.  Now, since growth trajectory fish depends age matures, since maturation arandom process, let us simulate lots fish look possible growth trajectories.","code":"fish = new(Fish) years = 1:31 length = numeric(31) for (i in years){   length[i] = fish$length   fish$updateMaturity()   fish$grow(0)   fish$set_age(fish$age+1) }  plot(length~years, xlab=\"Age\", ylab=\"Length\", type=\"l\", lwd=2) # NEW MODEL N = 100 plot(x=1, y=NA, xlim=c(0,31), ylim=c(0,200), xlab=\"age\", ylab = \"length\") for (f in 1:N){   fish = new(Fish)   fish$par$s0 = 0.09637   fish$par$Bhalf_growth = 1e11    dat = data.frame(t_birth=0,   age=0,  isMature=0, isAlive=0,  length=0,   weight=0)   dat = rbind(dat, fish$get_state())   dat = dat[-1,]   for (i in 1:30){     dat = rbind(dat, fish$get_state())     fish$updateMaturity()     fish$grow(0)     fish$set_age(fish$age+1)   }   points(dat$length~dat$age, type=\"l\", col=rainbow(N)[f]) }"},{"path":"https://jaideep777.github.io/rfish/articles/single_fish.html","id":"using-different-models-for-life-processes","dir":"Articles","previous_headings":"","what":"Using different models for life processes","title":"Creating and simulating a single fish","text":"fish four life processes: Growth (gro) Maturation (mat) Mortality (mor) Fecundity (fec) processes can simulated either model Dankel et al XXX (old model) XXX et al XXX (new model). set model use, can set following four flags true false. growth trajectory fish using model Dankel et al XXX.","code":"fish.par$use_old_model_gro = T fish.par$use_old_model_mat = T fish.par$use_old_model_mor = T fish.par$use_old_model_fec = T fish = new(Fish) fish$par$use_old_model_gro = T  dat = data.frame(t_birth=0, age=0,  isMature=0, isAlive=0,  length=0,   weight=0) dat = rbind(dat, fish$get_state()) dat = dat[-1,] for (i in 1:30){   dat = rbind(dat, fish$get_state())   fish$updateMaturity()   fish$grow(0)   fish$set_age(fish$age+1) } plot(dat$length~dat$age, type=\"l\", xlab=\"Age\", ylab=\"Length\", col=\"black\")"},{"path":"https://jaideep777.github.io/rfish/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jaideep Joshi. Maintainer.","code":""},{"path":"https://jaideep777.github.io/rfish/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Joshi J (2022). rfish: Age-size-structured modelling fish populations. R package version 1.0.","code":"@Manual{,   title = {rfish: Age-size-structured modelling of fish populations},   author = {Jaideep Joshi},   year = {2022},   note = {R package version 1.0}, }"},{"path":"https://jaideep777.github.io/rfish/reference/rfish-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fish — rfish-package","title":"fish — rfish-package","text":"fish class","code":""},{"path":"https://jaideep777.github.io/rfish/reference/rfish-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fish — rfish-package","text":"Imports","code":""}]
