[{"path":"https://jaideep777.github.io/fisheRy/articles/compare_hscans.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Simulating multiple populations at once","text":"usual, begin creating prototype fish","code":"params_file = \"../params/cod_params.ini\" # Create a prototype fish as usual fish = new(Fish, params_file)  # Create a simulator sim = new(Simulator, fish)  sim$equilibriateNaturalPopulation(1.93e3, 5.61, 2e6) ##  [1]  3.306157e+09  0.000000e+00  0.000000e+00 -4.925584e+08  0.000000e+00 ##  [6]  0.000000e+00 -1.249998e+08 -3.675586e+08  3.308932e+09  1.274555e+00 ## [11]  5.822393e+08  1.420000e+08  6.580000e+02  7.755859e-01  1.325454e-02 ## [16]  1.693070e+02  1.473857e+02  6.288879e-01  1.824441e-01  0.000000e+00"},{"path":"https://jaideep777.github.io/fisheRy/articles/compare_hscans.html","id":"create-a-population-to-simulate","dir":"Articles","previous_headings":"","what":"Create a population to simulate","title":"Simulating multiple populations at once","text":"create population reused simulator.","code":"pop = new(Population, fish) pop$set_superFishSize(5e6) pop$verbose = F"},{"path":"https://jaideep777.github.io/fisheRy/articles/compare_hscans.html","id":"plotting-utility","dir":"Articles","previous_headings":"","what":"Plotting utility","title":"Simulating multiple populations at once","text":"","code":"source(\"../R/plot_scan.R\")"},{"path":"https://jaideep777.github.io/fisheRy/articles/compare_hscans.html","id":"simulate","dir":"Articles","previous_headings":"","what":"Simulate","title":"Simulating multiple populations at once","text":"can now simulate populations different harvesting rates. , simulate 20 populations harvesting rates specified hvec vector. simulate_multi function returns array dimensions {nsteps, length(hvec), 4}. last dimension four four utilities returned: {ssb, yield, employment, profit}.","code":"nsteps = 200 hvec = seq(0, 0.99, length.out = 20) lminvec = seq(45, 200, length.out = 3) Tvec = seq(4, 8, length.out = 20)  if(re_simulate){   res_ibm_full = sim$simulate_multi_2d(pop, Tvec, c(45), c(0.44), nsteps, 1.93e3, T)   save(res_ibm_full, file=\"res_ibm_scan_T.Rdata\") } else{   load(\"res_ibm_scan_T.Rdata\") }  lf = 45 arr = res_ibm_full  names = pop$colnames dat_ibm = data.frame(matrix(ncol=length(names), nrow=0)) colnames(dat_ibm) = names for (i in 1:length(Tvec)){   v_ibm = colMeans(arr[101:200, 1, 1, i,])   dat_ibm[nrow(dat_ibm)+1,] = v_ibm }  plot_scan(dat_ibm, xname = expression(\"Temperature (\"^o*\"C)\"), xvec = Tvec)"},{"path":"https://jaideep777.github.io/fisheRy/articles/compare_hscans.html","id":"effect-of-harvest-proportion-new-model","dir":"Articles","previous_headings":"","what":"Effect of harvest proportion (new model)","title":"Simulating multiple populations at once","text":"Generate reference","code":"dat_ref = data.frame(matrix(ncol=7, nrow=0)) colnames(dat_ref) = c(\"ssb\", \"tsb\", \"yield\", \"employment.sea\", \"employment.shore\", \"profit.sea\", \"profit.shore\") for (ih in 1:length(hvec)){   res = simulate(hvec[ih], lf, F)   v = colMeans((res$summaries %>% select(SSB, TSB, Y, D.sea, D.shr, P.sea, P.shr))[101:200,])   dat_ref[nrow(dat_ref)+1,] = v } fish = new(Fish, \"../params/cod_params.ini\") sim = new(Simulator, fish) sim$equilibriateNaturalPopulation(1.93e3, 5.61, 2e6) ##  [1]  2.926447e+09  0.000000e+00  0.000000e+00 -4.925584e+08  0.000000e+00 ##  [6]  0.000000e+00 -1.249998e+08 -3.675586e+08  3.042178e+09  1.886227e+00 ## [11]  8.464860e+08  1.000000e+08  8.310000e+02  7.968857e-01  2.177760e-02 ## [16]  1.731212e+02  1.492023e+02  5.947209e-01  1.218130e-01  0.000000e+00 pop = new(Population, fish) # pop$par$dsea = 0.02 pop$set_superFishSize(5e6) pop$verbose = F  nsteps = 200 hvec = seq(0.01, 0.99, length.out = 20) lminvec = seq(45, 200, length.out = 3) Tvec = seq(4, 8, length.out = 20)  if(re_simulate){   res_ibm_full = sim$simulate_multi_2d(pop, c(5.61), c(45), hvec, nsteps, 1.93e3, T)   save(res_ibm_full, file=\"res_ibm_scan_h.Rdata\") } else {    load(\"res_ibm_scan_h.Rdata\") }  lf = 45 arr = res_ibm_full  names = pop$colnames dat_ibm = data.frame(matrix(ncol=length(names), nrow=0)) colnames(dat_ibm) = names for (i in 1:length(Tvec)){   v_ibm = colMeans(arr[101:200, i, 1, 1,])   dat_ibm[nrow(dat_ibm)+1,] = v_ibm }  plot_scan(dat_ibm, xname = expression(\"Harvest proportion\"), xvec = hvec) #, dat_ref=dat_ref)"},{"path":"https://jaideep777.github.io/fisheRy/articles/compare_hscans.html","id":"effect-of-harvest-proportion-dankel-et-al--model","dir":"Articles","previous_headings":"","what":"Effect of harvest proportion (Dankel et al. model)","title":"Simulating multiple populations at once","text":"also look predictions Dankel et al model implementation, compare results.","code":"fish = new(Fish, \"../params/cod_params_dankel22.ini\")  sim = new(Simulator, fish)  sim$equilibriateNaturalPopulation(1.93e3, 5.61, 2e6) ##  [1]  1.487533e+10  0.000000e+00  0.000000e+00 -4.925584e+08  0.000000e+00 ##  [6]  0.000000e+00 -1.249998e+08 -3.675586e+08  1.769984e+10  2.177072e+01 ## [11]  7.756002e+09  9.240000e+08  6.904000e+03  0.000000e+00  2.394962e-02 ## [16]  1.626982e+02  1.174201e+02  4.371944e-01  1.320012e-01  0.000000e+00 pop = new(Population, fish) pop$par$recruitmentAge = 1 pop$par$dmax = 30000 pop$set_superFishSize(5e6) pop$verbose = F  nsteps = 200 hvec = seq(0.01, 0.99, length.out = 20) lminvec = seq(45, 200, length.out = 3) Tvec = seq(4, 8, length.out = 20)  if(re_simulate){   res_ibm_full = sim$simulate_multi_2d(pop, c(5.61), c(45), hvec, nsteps, 1.93e3, T)   save(res_ibm_full, file=\"res_ibm_scan_h_Dankel22.Rdata\") } else {   load(\"res_ibm_scan_h_Dankel22.Rdata\") }  lf = 45 arr = res_ibm_full  names = pop$colnames dat_ibm = data.frame(matrix(ncol=length(names), nrow=0)) colnames(dat_ibm) = names for (i in 1:length(Tvec)){   v_ibm = colMeans(arr[101:200, i, 1, 1,])   dat_ibm[nrow(dat_ibm)+1,] = v_ibm }  plot_scan(dat_ibm, xname = expression(\"Harvest proportion\"), xvec = hvec, dat_ref=dat_ref)"},{"path":"https://jaideep777.github.io/fisheRy/articles/evolving_unfished_population.html","id":"create-a-fish","dir":"Articles","previous_headings":"","what":"Create a fish","title":"Simulating a fish population without fishing","text":"population collection fish. Therefore create population, first create fish. fish used prototype construct population. , create fish set parameters: Let us set parameters allow us reproduce Dankel et al XXXX model.","code":"params_file = \"../params/cod_params.ini\" fish = new(Fish, params_file) fish$par$Bhalf = 3.65e8  fish$par$growth_model_name = \"Dankel22\" fish$par$maturation_model_name = \"Dankel22\" fish$par$mortality_model_name = \"Dankel22\" fish$par$recruitment_model_name = \"BevertonHoltDirect\"  fish$init(1.93e3, 5.61) fish$par$print() fish$get_state() ## [1]  0.00000000  1.00000000  0.00000000  1.00000000 19.97761768  0.06654594"},{"path":"https://jaideep777.github.io/fisheRy/articles/evolving_unfished_population.html","id":"create-a-population","dir":"Articles","previous_headings":"","what":"Create a population","title":"Simulating a fish population without fishing","text":"constructor population requires Fish object argument. fish object used prototype construct fish population. can create fish population follows:","code":"pop = new(Population, fish)"},{"path":"https://jaideep777.github.io/fisheRy/articles/evolving_unfished_population.html","id":"setting-population-parameters","dir":"Articles","previous_headings":"","what":"Setting population parameters","title":"Simulating a fish population without fishing","text":"Population parameters can set way fish parameters, using par object population Two parameters important: n - Superfish size. Since population can billions fish, simulate individual fish. Rather, “Fish” represents group n actual fish. collection called “Superfish”. Reducing parameter necessitate simulating agents model, reduce noise also take computational time. Bhalf - parameter controls density dependent recruitment. can also set management parameters population: Harvest proportion - proportion fish allowed harvested every year Minimum size limit - size fish harvested","code":"pop$par$n = 2e6  # Each superfish contains so many fish pop$set_harvestProp(0)   # Harvest  pop$set_minSizeLimit(45) # Only fish above 45 cm length can be harvested"},{"path":"https://jaideep777.github.io/fisheRy/articles/evolving_unfished_population.html","id":"initialising-a-population","dir":"Articles","previous_headings":"","what":"Initialising a population","title":"Simulating a fish population without fishing","text":"default, population contains fish. must initialize population specified number superfish. can also peek state population. state population simply dataframe consisting state superfish population.","code":"pop$init(1000, 1.93e3, 5.61)  # initialize the population with 1000 agents (superfish) d = pop$get_state() head(d) ##   t.birth age isMature isAlive   length     weight flag ## 1       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 2       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 3       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 4       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 5       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 6       1   1    FALSE    TRUE 19.97762 0.06654594    0"},{"path":"https://jaideep777.github.io/fisheRy/articles/evolving_unfished_population.html","id":"simulating-an-unfished-population","dir":"Articles","previous_headings":"","what":"Simulating an unfished population","title":"Simulating a fish population without fishing","text":"can simulate population continuously updateing . update performs 1 year simulation, implementing processes maturation, growth, mortality, reproduction fish population. example, let simulate population 200 years.","code":"pop$verbose = T nsteps = 200             # Let's simulate for 200 years nfish = numeric(nsteps)  # Let's keep track of the number of superfish nfish[1]=1000            # Since we initialized the population with 1000 superfish cnames = pop$colnames dat = data.frame(matrix(ncol=length(cnames), nrow=0)) colnames(dat) = cnames trait_dist = array(dim = c(6, nsteps, 100)) trait_scalars = c(6.5, 0.09, 150, -6.6, 50, 0.06) trait_breaks = seq(0,2,length.out=101) trait_names = c(\"alpha1\", \"gsi\", \"pmrn_intercept\", \"pmrn_slope\", \"pmrn_width\", \"s0\") for (i in 1:nsteps){   v = pop$update(5.61)       # Update all fish over 1 year    dat[i,] = v    # some book-keeping   traits = pop$get_traits()   for (it in 1:6){     h = hist(traits[,it]/trait_scalars[it], breaks = trait_breaks, plot=F)     trait_dist[it,i,] = h$density   }   nfish[i] = pop$nfish() }  d = pop$get_state() dist = table(d$age, d$length)  par(mfrow = c(3,1), mar=c(5,5,1,1), oma=c(1,1,1,1), cex.lab=1.5, cex.axis=1.5) plot(nfish~seq(1,nsteps,1), ylab=\"No. of superfish\", xlab=\"Year\") image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") ## Warning in log(1 + 3 * log(dist)): NaNs produced res = simulate(0, 45, F) matplot(cbind(dat$ssb/1e9, res$summaries$SSB[1:nsteps]/1e9), ylab=\"SSB (MT)\", xlab=\"Year\", col=c(\"cyan\", \"black\"), lty=1, type=c(\"p\",\"l\"), pch=1) par(mfrow = c(3,2), mar=c(4,4,1,1), oma=c(1,1,1,1), cex.lab=1.3, cex.axis=1.2) for (it in 1:6){   image(y=(trait_breaks[-1]-diff(trait_breaks)/2)*abs(trait_scalars[it]), x=1:nsteps, z=log(1e-4+trait_dist[it,,]), col=scales::viridis_pal()(100), xlab=\"Time\", ylab=trait_names[it])  }"},{"path":"https://jaideep777.github.io/fisheRy/articles/evolving_unfished_population.html","id":"bioenergetic-model","dir":"Articles","previous_headings":"","what":"Bioenergetic model","title":"Simulating a fish population without fishing","text":"Now, let’s simulate bioenergetic model compare results model Dankel et al.","code":"fish = new(Fish, params_file) fish$par$s0 = 0.059 fish$trait_variances = c(0, 1, 1, 1, 1, 0)*0.01  pop = new(Population, fish)   pop$par$n = 1e6  # Each superfish contains so many fish pop$init(1000, 1.93e3, 5.61)  # initialize the population with 1000 agents (superfish)  pop$verbose = T nsteps = 1000             # Let's simulate for 200 years nfish = numeric(nsteps)  # Let's keep track of the number of superfish nfish[1]=1000            # Since we initialized the population with 1000 superfish  temp = rep(5.61, nsteps) temp[(nsteps/2+1):nsteps] = seq(5.61,10, length.out=nsteps/2)  cnames = pop$colnames dat = data.frame(matrix(ncol=length(cnames), nrow=0)) colnames(dat) = cnames trait_dist = array(dim = c(6, nsteps, 100)) trait_scalars = c(6.5, 0.09, 150, -6.6, 50, 0.06) trait_breaks = seq(0,2,length.out=101) trait_names = c(\"alpha1\", \"gsi\", \"pmrn_intercept\", \"pmrn_slope\", \"pmrn_width\", \"s0\") trait_means = array(dim=c(6, nsteps)) for (i in 1:nsteps){   v = pop$update(5.61) #temp[i])       # Update all fish over 1 year    dat[i,] = v    # some book-keeping   traits = pop$get_traits()   traits = pop$get_traits()   for (it in 1:6){     h = hist(traits[,it]/trait_scalars[it], breaks = trait_breaks, plot=F)     trait_dist[it,i,] = h$density     trait_means[it,i] = abs(mean(traits[,it]))   }   nfish[i] = pop$nfish() }  d = pop$get_state() dist = table(d$age, d$length)  par(mfrow = c(3,1), mar=c(5,5,1,1), oma=c(1,1,1,1), cex.lab=1.5, cex.axis=1.5) plot(nfish~seq(1,nsteps,1), ylab=\"No. of superfish\", xlab=\"Year\") image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") ## Warning in log(1 + 3 * log(dist)): NaNs produced res = simulate(0, 45, F) matplot(cbind(dat$ssb/1e9, res$summaries$SSB[1:nsteps]/1e9), ylab=\"SSB (MT)\", xlab=\"Year\", col=c(\"cyan\", \"black\"), lty=1, type=c(\"p\",\"l\"), pch=1) par(mfrow = c(3,2), mar=c(4,4,1,1), oma=c(1,1,1,1), cex.lab=1.3, cex.axis=1.2) for (it in 1:6){   image(y=(trait_breaks[-1]-diff(trait_breaks)/2)*abs(trait_scalars[it]), x=1:nsteps, z=log(1e-4+trait_dist[it,,]), col=scales::viridis_pal()(100), xlab=\"Time\", ylab=trait_names[it])    lines(y=trait_means[it,], x=1:nsteps, col=\"white\", lwd=2) }"},{"path":"https://jaideep777.github.io/fisheRy/articles/fished_population.html","id":"set-fishing-parameters","dir":"Articles","previous_headings":"","what":"Set fishing parameters","title":"Simulating a fish population with fishing","text":"created population, can set fishing parameters: Harvest proportion - proportion fish allowed harvested every year Minimum size limit - size fish harvested important step set simulate_bio_only flag, simulating socioeconomic dynamics requires additional steps, show another vignette.","code":"pop$set_harvestProp(0.3)   # Harvest  pop$set_minSizeLimit(45) # Only fish above 45 cm length can be harvested pop$par$simulate_bio_only = T # VERY IMPORTANT"},{"path":"https://jaideep777.github.io/fisheRy/articles/fished_population.html","id":"initialise-and-simulate-the-population","dir":"Articles","previous_headings":"","what":"Initialise and simulate the population","title":"Simulating a fish population with fishing","text":"simulate population continuously updateing . update performs 1 year simulation, implementing processes maturation, growth, mortality, reproduction fish population. time, also provide dynamic temperature timeseries population, wherein first 100 years fixed temperature 5.61 degC, next 100 years, temperature increases linearly 8 degC.","code":"pop$init(1000, 1.93e3, 5.61)  # initialize the population with 1000 agents (superfish) pop$verbose = T nsteps = 200             # Let's simulate for 200 years nfish = numeric(nsteps)  # Let's keep track of the number of superfish nfish[1]=1000            # Since we initialized the population with 1000 superfish cnames = pop$colnames dat = data.frame(matrix(ncol=length(cnames), nrow=0)) colnames(dat) = cnames  temp = rep(5.61, nsteps) temp[(nsteps/2+1):nsteps] = seq(5.61,8, length.out=nsteps/2)  for (i in 1:nsteps){   v = pop$update(temp[i])       # Update all fish over 1 year    dat[i,] = v    # some book-keeping   nfish[i] = pop$nfish() }  # for (i in (nsteps/2+1):nsteps){ #   v = pop$update(temp[i])       # Update all fish over 1 year  #   dat[i,] = v    # some book-keeping #   nfish[i] = pop$nfish() # }  d = pop$get_state() dist = table(d$age, d$length)  par(mfrow = c(4,1), mar=c(5,5,1,1), oma=c(1,1,1,1), cex.lab=1.5, cex.axis=1.5) plot(temp~seq(1,nsteps)) plot(nfish~seq(1,nsteps,1), ylab=\"No. of superfish\", xlab=\"Year\") image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") ## Warning in log(1 + 3 * log(dist)): NaNs produced res = simulate(0.3, 45, F) matplot(cbind(dat$ssb/1e9, res$summaries$SSB[1:nsteps]/1e9), ylab=\"SSB (MT)\", xlab=\"Year\", col=c(\"cyan\", \"black\"), lty=1, type=c(\"o\",\"l\"), pch=1)"},{"path":"https://jaideep777.github.io/fisheRy/articles/jss_calcs_h.html","id":"simulating-the-fishery-with-socioeconomic-outputs","dir":"Articles","previous_headings":"","what":"Simulating the fishery with socioeconomic outputs","title":"Safe operating spaces","text":"socio-economic part fishery deals calculation realized fishing effort desired harvest rate, resulting employment sea shore, profit operating fishery. effort calculations need require equilibrium fishable biomass equivalent unfished population. simplify simulations, fisheRy provides Simulator can precompute properties hypothetical unfished population, also allows simulating multiple populations different management regimes. start creating protoype fish usual, create simulator run equivalent unfished population equilibrium. , create fished population simulate 500 years status quo management regime \\(h = 0.41\\), \\(L50 = 45\\), \\(T = 5.6\\). can also plot biological socioeconomic parameters function time.  can continue simulate population different management conditions, e.g., higher harvest proportion 0.2.   Thus, can plot two populations together:","code":"# Create a prototype fish as usual fish = new(Fish, params_file) sim = new(Simulator, fish) sim$equilibriateNaturalPopulation(1.93e3, 5.61, 5e6) ##  [1]  3.503432e+09  0.000000e+00  0.000000e+00 -4.925584e+08  0.000000e+00 ##  [6]  0.000000e+00 -1.249998e+08 -3.675586e+08  3.263406e+09  1.034922e+00 ## [11]  4.764779e+08  5.500000e+07  2.230000e+02  7.778826e-01  1.024067e-02 ## [16]  1.610182e+02  1.528061e+02  5.724618e-01  1.681818e-01  0.000000e+00 plot_timeseries = function(res_ibm, pop, h, nsteps=200){      d = pop$get_state()   table(d$age)   par(mfrow = c(4,3), mar=c(4,4,1,1))      plot(y=res_ibm$ssb/1e9, x=seq(1,nsteps,1), ylab=\"Spawning stock biomass (Mt)\", xlab=\"Year\", col=\"cyan3\", type=\"l\")   plot(y=res_ibm$yield/1e9, x=seq(1,nsteps,1), ylab=\"Yield (Mt)\", xlab=\"Year\", col=\"cyan3\", type=\"l\")   plot(y=res_ibm$employment.sea, x=seq(1,nsteps,1), ylab=\"Employment at sea (person-years)\", xlab=\"Year\", col=\"cyan3\", type=\"l\")   plot(y=res_ibm$employment.shore, x=seq(1,nsteps,1), ylab=\"Employment on shore (person-years)\", xlab=\"Year\", col=\"cyan3\", type=\"l\")   plot(y=res_ibm$profit.sea/1e9, x=seq(1,nsteps,1), ylab=\"Profit at sea (Billions NOK)\", xlab=\"Year\", col=\"cyan3\", type=\"l\")   plot(y=res_ibm$profit.shore/1e9, x=seq(1,nsteps,1), ylab=\"Profit at shore (Billions NOK)\", xlab=\"Year\", col=\"cyan3\", type=\"l\")   d = pop$get_state()   d1 = d %>% group_by(age) %>% summarize(mat = length(which(isMature))/length(isMature))   plot(mat, type=\"l\")   points(d1$mat~I(d1$age-1), type=\"o\", col=\"cyan3\") # Decrement age to get the right maturation prob (see note above)     plot(res_ibm$r0~seq(1,nsteps,1), xlab=\"Year\", ylab= \"r0\", col=\"cyan3\", type=\"p\", ylim=c(0,30))     abline(h=21.77, col=\"black\")     matplot(y=cbind(res_ibm$survival_mean, res_ibm$maturity, res_ibm$Nrel), x=seq(1,nsteps,1), xlab=\"Year\", ylab= \"p_survival / maturity / Nrel\", col=c(\"cyan3\", \"magenta3\", \"yellow3\"), type=\"l\", lty=1)   matplot(y=cbind(res_ibm$factor_dg, res_ibm$factor_dr), x=seq(1,nsteps,1), xlab=\"Year\", ylab= \"dl_ratio, r_ratio\", col=c(\"cyan3\", \"magenta3\"), type=\"l\", lty=1)   matplot(y=cbind(res_ibm$length90, res_ibm$max_length), x=seq(1,nsteps,1), xlab=\"Year\", ylab= \"Length (90 %ile)\", col=c(\"cyan3\", \"cyan4\"), type=\"l\", lty=1)   dist = table(d$age, d$length)   image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") } pop_sq = new(Population, fish) pop_sq$set_superFishSize(5e6)  h_sq = 0.05 lf_sq = 45 t_sq = 5.6 nsteps_sq = 500 res_ibm_sq = sim$simulate(pop_sq, lf_sq, h_sq, nsteps_sq, 1.93e3, t_sq, T)  plot_timeseries(res_ibm_sq, pop_sq, h_sq, nsteps_sq) ## Warning in log(1 + 3 * log(dist)): NaNs produced nsteps = 50 h = 0.2 lf = 45  pop1 = pop_sq ## NO! This creates a shallow copy, so pop_sq will also be modified. res_ibm = sim$simulate(pop1, lf, h, nsteps, 1.93e3, 5.61, F)  plot_timeseries(res_ibm, pop1, h, nsteps) ## Warning in log(1 + 3 * log(dist)): NaNs produced utils = cbind(res_ibm$ssb/max(res_ibm$ssb), res_ibm$yield/max(res_ibm$yield), res_ibm$employment/max(res_ibm$employment), res_ibm$profit/max(res_ibm$profit))  par(mfrow=c(1,1), mar=c(4,4,1,1)) matplot(y=utils, x=1:50, xlab=\"Years\", ylab=\"Utilities\", col=c(\"darkgreen\", \"darkgoldenrod1\", \"dodgerblue3\", \"coral1\"), lty=1, lwd=2, type=\"l\") plot(y=c(res_ibm_sq$ssb, res_ibm$ssb)/1e9, x=seq(1,550), type=\"l\", col=\"cyan3\", xlab=\"Year\", ylab=\"SSB (MT)\", lwd=2) abline(v=500)"},{"path":"https://jaideep777.github.io/fisheRy/articles/jss_calcs_h.html","id":"multiple-populations","dir":"Articles","previous_headings":"","what":"Multiple populations","title":"Safe operating spaces","text":"Computing JSS requires analyze population’s response different management regimes. , simulate 25 populations 50 years different harvesting regimes (specified hvec vector). population starts equilibrium status quo management regime \\(h=0.41\\), \\(L_{min}=45\\), \\(T=5.61\\). simulate_multi_2d function returns array dimensions {nsteps, length(hvec), length(lmin_vec), length(Tvec), 4}. last dimension four four utilities returned: {ssb, yield, employment, profit}.","code":"source(\"../R/plot_scan.R\") # Recreate status quo population because the earlier one was modified  pop_sq = new(Population, fish) pop_sq$set_superFishSize(5e6) h_sq = 0.41 lf_sq = 45 t_sq = 5.6 nsteps_sq = 500 res_ibm_sq = sim$simulate(pop_sq, lf_sq, h_sq, nsteps_sq, 1.93e3, t_sq, T)   nsteps=50 hvec = seq(0., 0.99, length.out=25) pop = pop_sq if (re_simulate){   pop$set_superFishSize(5e6)   res_ibm_full = sim$simulate_multi_2d(pop, c(5.6), lf, hvec, nsteps, 1.93e3, F)   save(res_ibm_full, file = \"res_ibm_jss_h.Rdata\") } else{   load(\"res_ibm_jss_h.Rdata\") }  arr = res_ibm_full  names = pop$colnames dat_ibm = data.frame(matrix(ncol=length(names), nrow=0)) colnames(dat_ibm) = names for (i in 1:length(hvec)){   v_ibm = colMeans(arr[, i, 1, 1,])   dat_ibm[nrow(dat_ibm)+1,] = v_ibm }  plot_scan(dat_ibm, xname = \"Harvest rate\", xvec = hvec)"},{"path":"https://jaideep777.github.io/fisheRy/articles/jss_calcs_h.html","id":"utilties","dir":"Articles","previous_headings":"","what":"Utilties","title":"Safe operating spaces","text":"can calculate normalized utility components timeseries bio-socio-economic parameters. timeseries 50 years includes transient phase population responding altered management regime, possibly equilibrium phase population equilibriates new regime.","code":"arr = res_ibm_full[,,,,1:4]  lfvec = c(lf) d = sim$max_avg_utils_2d(c(4,1, length(lfvec),length(hvec),50), arr)  utils = array(data=d, dim=c(length(hvec),length(lfvec),1, 4))  par(mfrow=c(2,1), mar=c(8,8,1,1), cex.lab=1.2) matplot(y=matrix(data=d, ncol=4), x=hvec, lty=1, type=\"l\", col=c(\"darkgreen\", \"darkgoldenrod1\", \"dodgerblue3\", \"coral1\"), lwd=3, ylim=c(0,1), ylab=\"Normalized\\nutility components\", xlab=\"Harvest proportion\") abline(h=0, col=\"grey\") plot(1,1, cex=0.01, xlab = \"\", ylab = \"\", axes = F, ylim=c(0,1)) legend(x = 0.7, y = 1, legend = c(\"Spawning stock biomass\", \"Yield\", \"Employment\", \"Profit\"), fill = c(\"darkgreen\", \"darkgoldenrod1\", \"dodgerblue3\", \"coral1\"))"},{"path":"https://jaideep777.github.io/fisheRy/articles/jss_calcs_h.html","id":"stakeholder-satisfaction","dir":"Articles","previous_headings":"","what":"Stakeholder satisfaction","title":"Safe operating spaces","text":"normalized utility components, stakeholder satisfaction can calculuted new management regime.","code":"arr = res_ibm_full[,,,,1:4]  lfvec = c(lf) ss = sim$stakeholder_satisfaction_2d(c(4,1, length(lfvec),length(hvec),50), arr)  par(mfrow=c(2,1), mar=c(4,4,1,1)) matplot(y=matrix(data=ss, ncol=5), x=hvec, lty=1, type=\"l\", lwd=3, ylim=c(0,1), col=c(\"grey\", \"darkgoldenrod1\", \"dodgerblue3\", \"coral1\",\"darkgreen\"), xlab=\"Harvest proportion\", ylab=\"Stakeholder satisfaction\") abline(h=0, col=\"grey\") plot(1,1, cex=0.01, xlab = \"\", ylab = \"\", axes = F, ylim=c(0,1)) legend(x = 0.6, y = 1, legend = c(\"Industrial fishers\", \"Artisanal fishers\", \"Employment-prioritizing policymakers\", \"Profit-prioritizing policymakers\", \"Conservationists\"), fill=c(\"grey\", \"darkgoldenrod1\", \"dodgerblue3\", \"coral1\",\"darkgreen\"))"},{"path":"https://jaideep777.github.io/fisheRy/articles/jss_calcs_h.html","id":"jss","dir":"Articles","previous_headings":"","what":"JSS","title":"Safe operating spaces","text":"Finally, JSS can calculated integrating satisfaction levels individual stakeholders.","code":"mat = matrix(data=ss, ncol=5) JSS_min = apply(mat, 1, min) JSS_mean = apply(mat, 1, mean) JSS_hmean = 1/apply(1/mat, 1, mean)  par(mfrow=c(2,1), mar=c(4,4,1,1)) matplot(y=cbind(JSS_mean, JSS_hmean, JSS_min), x=hvec, lty=1, type=\"l\", lwd=3, ylim=c(0,1), col=c(\"darkgoldenrod1\", \"dodgerblue3\", \"darkgreen\"), ylab=\"Joint stakeholder\\nsatisfaction\", xlab=\"Harvest proportion\") plot(1,1, cex=0.01, xlab = \"\", ylab = \"\", axes = F, ylim=c(0,1)) legend(x = 0.7, y = 1, legend = c(\"Arithmetic mean\", \"Harmonic mean\", \"Minimum\"), fill=c(\"darkgoldenrod1\", \"dodgerblue3\",\"darkgreen\"))"},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fisheries model theory: biological model","text":"fish goes four life-history processes every year: Growth - increment body size growth. Growth rates different mature immature individuals, since mature individuals allocate resources reproduction. Decision mature - Every year, fish decide whether mature (maturation). matured, reproduction begins. Reproduction - production eggs Mortality - natural fishing-induced death fish characterized age \\(\\\\{1,a_{\\max}\\}\\) length \\(l\\), \\(a_{\\max}\\) maximum considered age. , present model formulations four life-history processes. comparison, also present corresponding formulations simpler age-structured model Dankel et al. XXXX.","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"growth","dir":"Articles","previous_headings":"","what":"Growth","title":"Fisheries model theory: biological model","text":"Let us define generalized length increment (\\(\\Delta l_p\\)) age \\(-1\\) age \\(\\) \\[ \\Delta l_p = l_a^{\\gamma_1 \\gamma_2} - l_{-1}^{\\gamma_1 \\gamma_2}, \\] \\(\\gamma_{1}\\) allometric exponent relationship energy-acquisition rate body weight, \\(\\gamma_{2}\\) allometric exponent length-weight relationship. model, growth depends fish’s length, temperature, total stock biomass population, geneneralized length increment given \\[ \\Delta l_p = \\gamma_{1}\\alpha_{1}\\alpha_{2}^{- \\gamma_{1}} e^{(\\beta_1\\Delta B +\\beta_2 \\Delta T)}, \\] \\(\\alpha_{1}\\) mean weight-specific energy-acquisition rate, \\(\\alpha_{2}\\) allometric coefficient length-weight relationship, \\(\\Delta B = B - \\bar B\\) \\(\\Delta T = T - \\bar T\\) anomalies total stock biomass (TSB) temperature, respectively. Setting \\(\\beta_1 = \\beta_2 = 0\\) removes growth dependence temperature TSB. absence reproductive investment, .e., juvenile fish, new length therefore \\[ l'_{} = \\left(l_{- 1}^{\\gamma_{1}\\gamma_{2}} + \\Delta l_p\\right)^{\\frac{1}{{\\gamma_{1}\\gamma_{2}}}} \\] Mature fish (adults) invest energy reproduction, new length downregulated. Thus, length increment \\[ l_{} = \\left\\{ \\begin{matrix}             l'_{}, & \\mathrm{\\text{juvenile}}, \\\\      \\text{max}\\left\\{\\frac{l'_{}}{(1 + \\gamma_{1}g)^{\\frac{1}{{\\gamma_{1}\\gamma_{2}}}}},\\ l_{-1}\\right\\} &  \\mathrm{\\text{adult}} \\\\ \\end{matrix} \\right.\\ \\] \\(g\\) gonadosomatic index (GSI), .e., ratio reproductive investment somatic weight mature individuals. Symbols summarized table : use maximum current new length adults ensure body size shrink. effective GSI fish growth year can calculated difference potential length increment realized length increment, \\[ g_{}^{'} = \\frac{ \\Delta l_p - (l_{}^{\\gamma_{1}\\gamma_{2}} - l_{- 1}^{\\gamma_{1}\\gamma_{2}})}{\\gamma_{1}l_{}^{\\gamma_{1}\\gamma_{2}}}. \\]","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"simulating-growth","dir":"Articles","previous_headings":"Growth","what":"Simulating growth","title":"Fisheries model theory: biological model","text":"Let us now simulate growth fish starting age 1 upto age 30 constant temperature TSB. fish perform maturation, growth, age increment, every year order. record fish length timestep can plot growth trajectory.  Now, since growth trajectory fish depends age matures, since maturation random process, let us simulate lots fish look possible growth trajectories.","code":"params_file = \"../params/cod_params.ini\" fish = new(Fish, params_file) fish$init(0, 5.61)  years = 1:31 length = numeric(31) for (i in years){   length[i] = fish$length   fish$updateMaturity(5.61)   fish$grow(0, 5.61)   fish$set_age(fish$age+1) }  plot(length~years, xlab=\"Age\", ylab=\"Length\", type=\"l\", lwd=2) growth_trajectories = function(beta1=NULL, beta2=NULL, N=50){   names = c(\"t_birth\",  \"age\",  \"isMature\", \"isAlive\",  \"length\",   \"weight\", \"mort\", \"temp\", \"fec\", \"ssb\")   dat_full = data.frame(data=matrix(nrow=0, ncol=length(names)))   colnames(dat_full) = names   plot(x=1, y=NA, xlim=c(0,31), ylim=c(0,250), xlab=\"Age\", ylab = \"Length\")   for (f in 1:N){     fish = new(Fish, params_file)     if (!is.null(beta1)) fish$par$beta1 = beta1     if (!is.null(beta2)) fish$par$beta2 = beta2        dat = data.frame(data=matrix(nrow=0, ncol=length(names)))     colnames(dat) = names        temp0 = rnorm(1, mean=5.61, sd=3)     tsb0 = runif(1, min = 0, max = 1.93e3*3)     fish$init(tsb0, temp0)     dat[1,] = c(fish$get_state(), fish$naturalMortalityRate(5.61), 5.61, 0, 0.8*tsb0) # Assuming SSB is 80% of TSB, since we are not simulating a population          for (i in 2:30){       temp = rnorm(1, mean=5.61, sd=3)       tsb = runif(1, min = 0, max = 1.93e3*3)       fish$updateMaturity(temp)       fish$grow(tsb, temp)       fish$set_age(fish$age+1)       dat[i,] = c(fish$get_state(), fish$naturalMortalityRate(temp), temp, fish$produceRecruits(0.8*tsb*1e6, temp), 0.8*tsb) # Assuming SSB is 80% of TSB, since we are not simulating a population     }     points(dat$length~dat$age, type=\"l\", col=scales::alpha(rainbow(N)[f], 0.3))     dat_full = rbind(dat_full, dat)   }   dat_full } dat_full = growth_trajectories(N=50)"},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"decision-to-mature","dir":"Articles","previous_headings":"","what":"Decision to mature","title":"Fisheries model theory: biological model","text":"Decision mature defined probabilistic maturation reaction norm (PMRN), probability maturing next year depending age \\(\\), length \\(l\\), temperature \\(T\\), given following equation, \\[ m(,l_a,T) = \\frac{1}{1 + e^{-\\left(\\frac{l_{} - (s_{m}+ i_{m})}{d_{m}} + \\beta_3 \\Delta T\\right)}}, \\] steepness curve \\(d_m\\) calculated \\[ d_{m} = \\frac{\\Delta l_{50}}{\\ln{\\left( \\frac{1 - p}{p} \\right) - \\ln\\left( \\frac{p}{1 - p} \\right)}}. \\] Let us visualize PMRN.   PMRN influences growth trajectories determining age maturation, like ,  leads following maturity ogives.  Parameters maturation process listed following table:","code":"lvec = seq(0,200, length.out = 100) avec = seq(1,31, length.out = 31)  fish = new(Fish, params_file) fish$init(0, 5.61)  calc_maturation_prob1 = function(a,l, temp=5.61){   fish$set_age(a)   fish$set_length(l)   p = fish$maturationProb(temp)   p }   list(lvec = seq(0,200, length.out = 100), avec = seq(1,31, length.out = 31)) %>% cross_df() %>% mutate(prob = purrr::map2_dbl(avec, lvec, ~calc_maturation_prob1(.x, .y))) %>%  ggplot() +  geom_raster(aes(x=avec, y=lvec, fill=prob)) + scale_fill_viridis_c() + labs(x=\"Age\", y=\"Length\") + theme_classic(base_size=20) list(lvec = seq(0,200, length.out = 100), temp = c(4.61,5.61,6.61)) %>% cross_df() %>% mutate(prob = purrr::map2_dbl(lvec, temp, ~calc_maturation_prob1(a=10, l=.x, temp = .y))) %>%  ggplot() +  geom_line(aes(x=lvec, y=prob, group=temp, col=temp)) + scale_colour_viridis_c() + labs(x=\"Length\", y=\"Maturation probability\") + theme_classic(base_size=20) dat_full_00 = growth_trajectories(0,0) par(mfrow = c(2,1), mar=c(4,4,1,1))  dat_full %>% group_by(age) %>% summarize(maturity = mean(isMature)) %>% with(plot(maturity~age, ylab=\"Maturity\", xlab=\"Age\", type=\"l\", col=\"cyan3\", lwd=2))  dat_full %>% mutate(length_class = cut(length, breaks=20)) %>% group_by(length_class) %>% summarize(maturity = mean(isMature), length=mean(length)) %>% with(plot(maturity~length, ylab=\"Maturity\", xlab=\"Length\", type=\"l\", col=\"cyan3\", lwd=2))"},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"reproduction-and-recruitment","dir":"Articles","previous_headings":"","what":"Reproduction and recruitment","title":"Fisheries model theory: biological model","text":"Cumulative reproductive investment translates production eggs. fecundity rate (number eggs produced per year) given following equation: \\[ f(,l_a) = \\delta g_{}^{'} \\cdot w(l_a) \\] \\(w(l_a)\\) weight fish length \\(l_a\\), \\[ w(l_a) =  \\alpha_{2}l_{}^{\\gamma_{2}}, \\] \\(\\delta\\) mass-specific oocyte density mature pre-spawning ovary. Eggs survive first year probability \\(s_0\\) become recruits. Number recruits additionally also follows temperature dependence parameter \\(\\beta_4\\) Ricker density dependence parameter \\(B_{1/2}\\), \\[ n_\\text{recruits} = n_\\text{eggs}\\cdot s_0 \\cdot e^{\\beta_4 \\Delta T} \\cdot 2^{-S/B_{1/2}}, \\] \\(S\\) spawning stock biomass population \\[ S = \\sum_{\\text{>= 3}} w_a I_\\text{mature}, \\]  number recruits per fish function spawning stock biomass obtained growth trajectories .","code":"list(x = seq(0,10, length.out=100), temp = c(4.61, 5.61, 6.61)) %>% cross_df() %>% mutate(y = exp(0.5135*(temp-5.61)) * 2^(-x/0.530)) %>%  ggplot(aes(y=y,x=x, col=temp, group=temp)) + geom_line(size=1) + labs(x=\"Spawning stock biomass (Mt)\", y = \"Recruits / Recruits_0\") + theme_classic(base_size = 20) + scale_colour_viridis_c() dat_full %>% ggplot(aes(x=ssb, y=fec)) + geom_point(aes(col=temp)) + scale_colour_viridis_c() + labs(x=\"Spawning stock biomass (kT)\", y = \"Recruits per capita\") + theme_classic(base_size=20) + scale_y_log10(limits = c(1e-4, NA)) ## Warning: Transformation introduced infinite values in continuous y-axis ## Warning: Removed 39 rows containing missing values (geom_point). dat_full %>% mutate(ssb_class = ave(ssb, cut(ssb, breaks = 30))) %>% group_by(age, ssb_class) %>% summarize(recr = mean(fec)) %>%    ggplot() + geom_tile(aes(x=age, y=ssb_class, fill=log(1+recr))) + scale_fill_viridis_c() + labs(y=\"Spawning stock biomass (kT)\", x = \"Age\") + theme_classic(base_size=20) ## `summarise()` has grouped output by 'age'. You can override using the `.groups` ## argument."},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"mortality","dir":"Articles","previous_headings":"","what":"Mortality","title":"Fisheries model theory: biological model","text":"juvenile adult instantaneous natural mortality rate depends length \\(l_a\\) temperature \\(T\\), given following equation: \\[ M(,l_a) = \\left( \\mu_0 + \\alpha_{3}\\left( \\frac{l_{}}{l_{\\text{ref}}} \\right)^{\\gamma_{3}} \\right)\\left(\\frac{T}{T_\\text{ref}}\\right)^{c_T}, \\] symbols following meanings  Instantaneous fishing mortality rate depends harvest proportion \\(h\\) fishing selectivity \\(\\sigma\\), acts top natural mortality. Thus, given harvest proportion \\(h\\) minimum size limit \\(L_{50}\\), fishing mortality rate given \\[ F = -\\log(1-h)\\cdot \\sigma(l_a), \\] \\(\\sigma(l_a)\\) fishing selectivity, \\[ \\sigma(l_a) = \\frac{1}{1+e^{-s(l_a-L_{50})}}, \\] \\(s\\) Slope fishing selectivity curve.","code":"dat_full %>% ggplot(aes(y=mort, x=length, col=temp))+geom_point(alpha=0.5)+geom_jitter()+labs(x=\"Length\", y=expression(\"Inst. natural mortality rate (yr\"^\"-1\"*\")\"), col=\"Temp\")+theme_classic(base_size = 20)+scale_color_viridis_c()+scale_y_log10()+scale_x_log10() ## Warning: Removed 49 rows containing missing values (geom_point). ## Removed 49 rows containing missing values (geom_point). tibble(length = seq(0,200,length.out=100)) %>% mutate(mort = 1/(1+exp(-0.1222*(length-45)))) %>% ggplot(aes(y=mort, x=length))+geom_line(col=\"red\", size=2)+labs(x=\"Length\", y=\"Fishing selectivity\", col=\"Temp\")+theme_classic(base_size = 20) dat_full %>% mutate(sel = 1/(1+exp(-0.1222*(length-45)))) %>% ggplot(aes(y=mort-log(1-0.4)*sel, x=length, col=temp))+geom_point(alpha=0.5)+geom_jitter()+labs(x=\"Length\", y=expression(\"Inst. total mortality rate (yr\"^\"-1\"*\")\"), col=\"Temp\")+theme_classic(base_size = 20)+scale_color_viridis_c()+scale_y_log10()+scale_x_log10() ## Warning: Removed 49 rows containing missing values (geom_point). ## Removed 49 rows containing missing values (geom_point)."},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_bio.html","id":"survival-probability","dir":"Articles","previous_headings":"Mortality","what":"Survival probability","title":"Fisheries model theory: biological model","text":"Survival probability thus given following equation: \\[ s(,l_a) = e^{- (M(,l_a) + F)}, \\] \\(F\\) fishing mortality rate.","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_eco.html","id":"fishing-mortality","dir":"Articles","previous_headings":"","what":"Fishing Mortality","title":"Fisheries model theory: socioeconomic model","text":"given harvesting rate \\(h\\) minimum size limit \\(L_{50}\\), fishing mortality rate given \\[ F = -\\log(1-h)\\cdot \\sigma(l_a), \\] \\(\\sigma(l_a)\\) fishing selectivity \\[ \\sigma(l_a) = \\frac{1}{1+e^{-s(l_a-L_{50})}}, \\] parameters ","code":""},{"path":[]},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_eco.html","id":"required-fishing-effort","dir":"Articles","previous_headings":"Effort dynamics","what":"Required fishing effort","title":"Fisheries model theory: socioeconomic model","text":"effort (terms vessel-days) required achieve desired harvest proportion (.e., realize required fishing mortality) given \\[ E(F) = N_\\text{rel}^b \\cdot F \\cdot \\frac{1-e^{-(F+M)(1-b)}}{q(F+M)(1-b)}, \\] \\(M\\) average natural mortality rate fishable individuals, \\[ M = \\frac{\\sum_{,l}{\\mu(,l_a)\\cdot \\sigma(l_a) w_l} }{\\sum_{,l}{ \\sigma(l_a) w_l} }, \\] \\(N_\\text{rel}\\) current fishable biomass \\(B(t,h,L_{50})\\) fished population relative fishable biomass equivalent unfished population measured equilibrium, \\[ N_\\text{rel} = \\frac{B(t,h,L_{50})}{B(\\infty,0,L_{50})}. \\] fishable biomass defined \\[ B(t,h,L_{50}) = \\sum_{,l}{\\sigma(l_a) w_l} \\]","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_eco.html","id":"employment-at-sea-and-realized-effort","dir":"Articles","previous_headings":"Effort dynamics","what":"Employment at sea and realized effort","title":"Fisheries model theory: socioeconomic model","text":"assume employment required sea (terms person-years) achieve required fishing effort scales linearly required effort, \\[ D_\\text{sea,req} = d_\\text{sea} E \\] However, often case increasing effort, enough manpower can hired, thus, employment saturates maximum value \\(D_\\text{max}\\). case, realized employment given amount required effort given \\[ D_\\text{sea,real} = \\frac{D_\\text{sea,req}}{1 + \\frac{D_\\text{sea,req}}{D_\\text{max}}} \\] Therefore, realized effort , \\[ E_\\text{real} = D_\\text{sea,real} / d_\\text{sea}. \\] realized fishing mortality corresponding effort can calculated iteratively solving \\[ F_\\text{real} = \\text{root}( E(F) = E_\\text{real}). \\]","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_eco.html","id":"yield","dir":"Articles","previous_headings":"","what":"Yield","title":"Fisheries model theory: socioeconomic model","text":"Given realized fishing mortality, yield obtained Baranov Catch Equation, \\[ Y = \\sum_{,l_a} \\frac{F_\\text{real}}{F_\\text{real} + \\mu(,l_a)} w_l. \\]","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_eco.html","id":"employment-on-shore","dir":"Articles","previous_headings":"","what":"Employment on shore","title":"Fisheries model theory: socioeconomic model","text":"Employment shore proportional yield, \\[ D_\\text{shore} = d_{shr} Y \\]","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/theory_eco.html","id":"profit","dir":"Articles","previous_headings":"","what":"Profit","title":"Fisheries model theory: socioeconomic model","text":"Profit sea given \\[ R_\\text{sea}= Y P_\\text{sea} - \\gamma (D_\\text{sea,req}S_\\text{sea} + E_\\text{req}C_\\text{var,sea} + C_\\text{fixed,sea}) \\] Profit shore given \\[ R_\\text{shr}= Y\\cdot(P_\\text{shr}-P_\\text{sea}) - D_\\text{shore} S_\\text{shr} -  C_\\text{fixed,shr} \\] JAIDEEP: D_sea_req D_sea_real? calculating employmwnt, use req real?","code":""},{"path":"https://jaideep777.github.io/fisheRy/articles/unfished_population.html","id":"create-a-fish","dir":"Articles","previous_headings":"","what":"Create a fish","title":"Simulating a fish population without fishing","text":"population collection fish. Therefore create population, first create fish. fish used prototype construct population. , create fish set parameters: Let us set parameters allow us reproduce Dankel et al XXXX model.","code":"params_file = \"../params/cod_params.ini\" fish = new(Fish, params_file) fish$par$Bhalf = 3.65e8  fish$par$growth_model_name = \"Dankel22\" fish$par$maturation_model_name = \"Dankel22\" fish$par$mortality_model_name = \"Dankel22\" fish$par$recruitment_model_name = \"BevertonHoltDirect\"  fish$init(1.93e3, 5.61) fish$par$print() fish$get_state() ## [1]  0.00000000  1.00000000  0.00000000  1.00000000 19.97761768  0.06654594"},{"path":"https://jaideep777.github.io/fisheRy/articles/unfished_population.html","id":"create-a-population","dir":"Articles","previous_headings":"","what":"Create a population","title":"Simulating a fish population without fishing","text":"constructor population requires Fish object argument. fish object used prototype construct fish population. can create fish population follows:","code":"pop = new(Population, fish)"},{"path":"https://jaideep777.github.io/fisheRy/articles/unfished_population.html","id":"setting-population-parameters","dir":"Articles","previous_headings":"","what":"Setting population parameters","title":"Simulating a fish population without fishing","text":"Population parameters can set way fish parameters, using par object population Two parameters important: n - Superfish size. Since population can billions fish, simulate individual fish. Rather, “Fish” represents group n actual fish. collection called “Superfish”. Reducing parameter necessitate simulating agents model, reduce noise also take computational time. Bhalf - parameter controls density dependent recruitment. can also set management parameters population: Harvest proportion - proportion fish allowed harvested every year Minimum size limit - size fish harvested","code":"pop$par$n = 2e6  # Each superfish contains so many fish pop$set_harvestProp(0)   # Harvest  pop$set_minSizeLimit(45) # Only fish above 45 cm length can be harvested"},{"path":"https://jaideep777.github.io/fisheRy/articles/unfished_population.html","id":"initialising-a-population","dir":"Articles","previous_headings":"","what":"Initialising a population","title":"Simulating a fish population without fishing","text":"default, population contains fish. must initialize population specified number superfish. can also peek state population. state population simply dataframe consisting state superfish population.","code":"pop$init(1000, 1.93e3, 5.61)  # initialize the population with 1000 agents (superfish) d = pop$get_state() head(d) ##   t.birth age isMature isAlive   length     weight flag ## 1       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 2       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 3       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 4       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 5       1   1    FALSE    TRUE 19.97762 0.06654594    0 ## 6       1   1    FALSE    TRUE 19.97762 0.06654594    0"},{"path":"https://jaideep777.github.io/fisheRy/articles/unfished_population.html","id":"simulating-an-unfished-population","dir":"Articles","previous_headings":"","what":"Simulating an unfished population","title":"Simulating a fish population without fishing","text":"can simulate population continuously updateing . update performs 1 year simulation, implementing processes maturation, growth, mortality, reproduction fish population. example, let simulate population 200 years.","code":"pop$verbose = T nsteps = 200             # Let's simulate for 200 years nfish = numeric(nsteps)  # Let's keep track of the number of superfish nfish[1]=1000            # Since we initialized the population with 1000 superfish cnames = pop$colnames dat = data.frame(matrix(ncol=length(cnames), nrow=0)) colnames(dat) = cnames for (i in 1:nsteps){   v = pop$update(5.61)       # Update all fish over 1 year    dat[i,] = v    # some book-keeping   nfish[i] = pop$nfish() }  d = pop$get_state() dist = table(d$age, d$length)  par(mfrow = c(3,1), mar=c(5,5,1,1), oma=c(1,1,1,1), cex.lab=1.5, cex.axis=1.5) plot(nfish~seq(1,nsteps,1), ylab=\"No. of superfish\", xlab=\"Year\") image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") ## Warning in log(1 + 3 * log(dist)): NaNs produced res = simulate(0, 45, F) matplot(cbind(dat$ssb/1e9, res$summaries$SSB[1:200]/1e9), ylab=\"SSB (MT)\", xlab=\"Year\", col=c(\"cyan\", \"black\"), lty=1, type=c(\"p\",\"l\"), pch=1)"},{"path":"https://jaideep777.github.io/fisheRy/articles/unfished_population.html","id":"bioenergetic-model","dir":"Articles","previous_headings":"","what":"Bioenergetic model","title":"Simulating a fish population without fishing","text":"Now, let’s simulate bioenergetic model compare results model Dankel et al.","code":"fish = new(Fish, params_file) fish$par$s0 = 0.059  pop = new(Population, fish)   pop$par$n = 1e6  # Each superfish contains so many fish pop$init(1000, 1.93e3, 5.61)  # initialize the population with 1000 agents (superfish)  pop$verbose = T nsteps = 200             # Let's simulate for 200 years nfish = numeric(nsteps)  # Let's keep track of the number of superfish nfish[1]=1000            # Since we initialized the population with 1000 superfish cnames = pop$colnames dat = data.frame(matrix(ncol=length(cnames), nrow=0)) colnames(dat) = cnames for (i in 1:nsteps){   v = pop$update(5.61)       # Update all fish over 1 year    dat[i,] = v    # some book-keeping   nfish[i] = pop$nfish() }  d = pop$get_state() dist = table(d$age, d$length)  par(mfrow = c(3,1), mar=c(5,5,1,1), oma=c(1,1,1,1), cex.lab=1.5, cex.axis=1.5) plot(nfish~seq(1,nsteps,1), ylab=\"No. of superfish\", xlab=\"Year\") image(x=as.numeric(rownames(dist)), y = as.numeric(colnames(dist)), z=log(1+3*log(dist)), col=scales::viridis_pal()(100), xlab=\"Age\", ylab=\"Length\") ## Warning in log(1 + 3 * log(dist)): NaNs produced res = simulate(0, 45, F) matplot(cbind(dat$ssb/1e9, res$summaries$SSB[1:200]/1e9), ylab=\"SSB (MT)\", xlab=\"Year\", col=c(\"cyan\", \"black\"), lty=1, type=c(\"p\",\"l\"), pch=1)"},{"path":"https://jaideep777.github.io/fisheRy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jaideep Joshi. Maintainer.","code":""},{"path":"https://jaideep777.github.io/fisheRy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Joshi J (2023). fisheRy: Age-size-structured modelling fish populations. R package version 1.0.","code":"@Manual{,   title = {fisheRy: Age-size-structured modelling of fish populations},   author = {Jaideep Joshi},   year = {2023},   note = {R package version 1.0}, }"},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"fishery","dir":"","previous_headings":"","what":"Age-size-structured modelling of fish populations","title":"Age-size-structured modelling of fish populations","text":"FisheRy R package assess impact management choices sustainability fisheries. FisheRy runs agent-based age-size-structured biological model concerned fish, coupled socio-economic model fishery. predicts emergent properties fish population spawning stock biomass, well socio-economic outputs fishery, yield, employment, net revenue. can also compute satisfaction assessmnts multiple stakeholders, convervationists, government, industry, recreational users. can thus used calculate safe operating spaces, .e., management regimes high joint stakeholder satisfaction achieved.","code":""},{"path":[]},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"prerequisites","dir":"","previous_headings":"Installation","what":"Prerequisites","title":"Age-size-structured modelling of fish populations","text":"Install latest version R. Install C++ compiler supports C++11. already available Linux. Windows, install Rtools. Install devtools package","code":""},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"installing-fishery","dir":"","previous_headings":"Installation","what":"Installing fisheRy","title":"Age-size-structured modelling of fish populations","text":"can install fisheRy directly github. Currently, install new_model_restart branch, like : NOTE: Currently, package name fisheRy, load packaged using","code":"devtools::install_github(repo = \"jaideep777/fisheRy\", ref = \"new_model_restart\") library(fisheRy)"},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"stable-release","dir":"","previous_headings":"Installation","what":"Stable release","title":"Age-size-structured modelling of fish populations","text":"Coming soon.","code":""},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Age-size-structured modelling of fish populations","text":"Latest development version can found : https://github.com/jaideep777/fisheRy/tree/new_model_restart","code":""},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Age-size-structured modelling of fish populations","text":"solve fishery model, need create four objects: fish, used prototype construct fish population. reference population, simulated equilibrium fishing. population used perform simulaitons fishing. simulator, simulate population different management settings (defined via two control parameters - minimum size limit harvest proportion). simulator allows simultaneously simulating multiple populations different control parameters, also allows calculation utilties, stakeholder satisfaction, joint stakeholder satisfaction. details usage, please see tutorials .","code":""},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"documentaion","dir":"","previous_headings":"","what":"Documentaion","title":"Age-size-structured modelling of fish populations","text":"Detailed documentation totorials available [](please see tutorials .","code":""},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"author-and-contact","dir":"","previous_headings":"","what":"Author and contact","title":"Age-size-structured modelling of fish populations","text":"Jaideep Joshi joshi@iiasa.ac.","code":""},{"path":"https://jaideep777.github.io/fisheRy/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Age-size-structured modelling of fish populations","text":"project funded XXX.","code":""},{"path":"https://jaideep777.github.io/fisheRy/reference/rfish-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fish — fisheRy-package","title":"fish — fisheRy-package","text":"fish class","code":""},{"path":"https://jaideep777.github.io/fisheRy/reference/rfish-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fish — fisheRy-package","text":"Imports","code":""}]
