---
title: "Growth model calibration"
author: "Jaideep Joshi"
date: "9 May 2022"
output: html_document
editor_options:
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, include = F, echo = F}
library(rfish)
```

### Growth model parameters

```{r}
beta = 0.655793;
alpha = 3.056863227;
c = 6.318308;
k = 0.00674;
# r = 0.090367;
# q = 1;

gamma1 = 1-beta;
gamma2 = alpha;
# alpha1 = c;
alpha2 = k;
# gsi = r/q;

beta1 = 2.430;
beta2 = -7.07e-5;
beta3 = 0.178;
Tmean = 5.61;
tsbmean = 1.93e9/1e6;

```


```{r}
dl_power = function(tsb, temp, alpha1){
	t2 = gamma1 * alpha1 * alpha2^(-gamma1)
	t2 = t2 * exp(beta2*(tsb-tsbmean) + beta3*(temp-Tmean))
	t2
}

length_juvenile = function(init_length, tsb, temp, alpha1){
  t1 = init_length^ (gamma1 * gamma2)
  t2 = dl_power(tsb, temp, alpha1)
  l_new = (t1 + t2)^ (1 / (gamma1 * gamma2))
  l_new
}
```


### Simulate growth over five years


```{r}
fishLen = function(alpha1, ny=6){
  years = (1:ny)+1
  len = numeric(ny+1)
  len[1] = 9.1
  for (i in years){
    len[i] = length_juvenile(len[i-1], tsbmean, Tmean, alpha1)
  }
  len[-1]
}

ny=6

plot(fishLen(c)~seq(1,ny), xlab="Age", ylab="Length", type="l", lwd=2)
```


### Compare with C++ sim to ensure all is well

```{r}
# NEW MODEL
N = 100
plot(x=1, y=NA, xlim=c(0,31), ylim=c(0,200), xlab="age", ylab = "length")
for (f in 1:N){
  fish = new(Fish)
  fish$par$s0 = 0.09637
  fish$init(1.93e3, 5.61)
  # fish$par$Bhalf_growth = 1e11

  dat = data.frame(t_birth=0,	age=0,	isMature=0,	isAlive=0,	length=0,	weight=0)
  dat = rbind(dat, fish$get_state())
  dat = dat[-1,]
  for (i in 1:30){
    dat = rbind(dat, fish$get_state())
    fish$updateMaturity()
    fish$grow(1.93e3, 5.61)
    fish$set_age(fish$age+1)
  }
  points(dat$length~dat$age, type="l", col=rainbow(N)[f])
}
points(fishLen(c)~seq(1,ny), xlab="Age", ylab="Length", type="l", lwd=2)
```

### First comparison of predicted and observed dl, with default value of alpha1


```{r}
# Statistical model
tsb_ano = 0
temp_ano = 0
dl_obs = exp(beta1+beta2*tsbmean + beta2*tsb_ano + beta3*temp_ano)

plot(diff(fishLen(c))~seq(1,ny-1), xlab="Age", ylab="dL", type="l", lwd=2)
abline(h = dl_obs, col="blue")

```

### Get weighted length and optimize alpha1

```{r}
dl_weighted = function(alpha1, weights){
  sum(diff(fishLen(alpha1))*weights)
}

wts = c(0.597721, 0.173708, 0.103396, 0.074332, 0.050843)

dl_weighted(c, weights = wts)

dl_alpha1 = sapply(X = seq(4,8, length.out = 100), FUN = dl_weighted, weights = wts)

plot(dl_alpha1~seq(4,8, length.out = 100), ylab="weighted dl", xlab="alpha1", type="l", lwd=2)
abline(h = dl_obs, col="blue")

```


### Find optimal alpha1

```{r}
error_fun = function(alpha1, weights){
  (dl_weighted(alpha1, weights) - dl_obs)^2
}

optim(par = c(c), fn = error_fun, weights = wts, method="Brent", upper = 8, lower=4)
```

